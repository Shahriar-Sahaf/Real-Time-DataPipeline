version: '3.8'

services:
  
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: apiGateway-services
    command: node src/app.js
    ports:
      - "3000:3000"
    env_file:
      - ./apiGateway-services/.env
    depends_on:
      
      rabbitmq:
        condition: service_healthy
    networks:
      - data-pipeline-net

  
  consumer-worker:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: Worker-services
    command: node consumer.js
    env_file:
      - ./Worker-services/.env
    depends_on:
      
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
      mongo:
        condition: service_started 
      redis:
        condition: service_healthy
    networks:
      - data-pipeline-net

  
  realtime-service:
    build:
      context: .
      dockerfile: Dockerfile
      args:
        SERVICE_NAME: realTime-services
    command: node server/index.js
    ports:
      - "3001:3001"
    env_file:
      - ./realTime-services/.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - data-pipeline-net

  
  rabbitmq:
    image: rabbitmq:3.9-management-alpine
    ports: ["5672:5672", "15672:15672"]
    
    healthcheck:
      
      test: ["CMD", "rabbitmqctl", "await_startup"]
      interval: 10s
      timeout: 5s
      retries: 10 
    networks: [data-pipeline-net]

  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: ${PG_DATABASE}
    ports: ["5432:5432"]
    volumes: [postgres-data:/var/lib/postgresql/data]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [data-pipeline-net]

  mongo:
    image: mongo:5.0
    ports: ["27000:27017"]
    volumes: [mongo-data:/data/db]
    networks: [data-pipeline-net]

  redis:
    image: redis:6.2-alpine
    ports: ["6379:6379"]
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: [data-pipeline-net]

networks:
  data-pipeline-net:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
